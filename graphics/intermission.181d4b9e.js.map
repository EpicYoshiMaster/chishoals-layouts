{"mappings":"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","sources":["node_modules/fitted-text/dist/fitted-text.js"],"sourcesContent":["\"use strict\";\n/*\n    FittedText\n\n    Horizontally squishes text to a specific width\n    A VanillaJS alternative to https://github.com/SupportClass/sc-fitted-text\n\n    Written by Inkfarer - https://inkfarer.com\n*/\nclass FittedText extends HTMLElement {\n    constructor() {\n        super();\n        this.fittedContent = document.createElement('div');\n    }\n    connectedCallback() {\n        const align = this.getAttribute('align') || 'left';\n        this.innerHTML = '';\n        this.style.display = 'flex';\n        this.style.position = 'relative';\n        this.style.whiteSpace = 'nowrap';\n        this.style.justifyContent = FittedText.getJustify(align);\n        this.fittedContent.setAttribute('style', FittedText.removeLineBreaks(`\n\t\t\ttransform-origin: ${align} center;\n\t\t\ttext-align: ${align};\n\t\t`));\n        this.appendChild(this.fittedContent);\n        this.setTransform();\n    }\n    static get observedAttributes() { return ['text', 'max-width', 'align', 'use-inner-html']; }\n    attributeChangedCallback(name, oldValue, newValue) {\n        switch (name) {\n            case 'text':\n                this.setText();\n                this.setTransform();\n                break;\n            case 'max-width':\n                this.style.maxWidth = `${this.maxWidth > 0 ? this.maxWidth + 'px' : 'unset'}`;\n                this.setTransform();\n                break;\n            case 'align':\n                this.style.justifyContent = FittedText.getJustify(newValue);\n                this.fittedContent.style.textAlign = newValue;\n                this.fittedContent.style.transformOrigin = `${newValue} center`;\n                break;\n            case 'use-inner-html':\n                this.setText();\n                this.setTransform();\n                break;\n        }\n    }\n    setText() {\n        if (this.useInnerHTML) {\n            this.fittedContent.innerHTML = this.text;\n        }\n        else {\n            this.fittedContent.innerText = this.text;\n        }\n    }\n    setTransform() {\n        if (this.maxWidth <= 0)\n            return;\n        const width = this.getTextWidth();\n        if (width > this.maxWidth) {\n            this.fittedContent.style.transform = `scaleX(${this.maxWidth / width})`;\n        }\n        else {\n            this.fittedContent.style.transform = 'scaleX(1)';\n        }\n    }\n    getTextWidth() {\n        if (!this.fittedContent.parentNode) {\n            return 0;\n        }\n        const scrollWidth = this.fittedContent.scrollWidth;\n        // If fitted content has no width (for instance, when the element is not being displayed using display: none),\n        // create an external element to calculate width\n        if (scrollWidth < 1 && this.text !== '') {\n            const measurer = this.fittedContent.cloneNode(true);\n            const style = window.getComputedStyle(this.fittedContent);\n            measurer.style.font = style.font;\n            measurer.style.fontKerning = style.fontKerning;\n            measurer.style.position = 'absolute';\n            measurer.style.left = '-9999px';\n            measurer.style.top = '-9999px';\n            measurer.style.zIndex = '-9999';\n            measurer.style.opacity = '0';\n            if (this.useInnerHTML) {\n                measurer.innerHTML = this.text;\n            }\n            else {\n                measurer.innerText = this.text;\n            }\n            document.body.appendChild(measurer);\n            const width = measurer.scrollWidth;\n            document.body.removeChild(measurer);\n            return width;\n        }\n        else {\n            return scrollWidth;\n        }\n    }\n    static getJustify(align) {\n        switch (align) {\n            case 'center':\n                return 'center';\n            case 'right':\n                return 'flex-end';\n            default:\n                return 'unset';\n        }\n    }\n    get text() {\n        return this.getAttribute('text') || '';\n    }\n    set text(newValue) {\n        this.setAttribute('text', newValue);\n    }\n    get maxWidth() {\n        const attr = parseInt(this.getAttribute('max-width') || '');\n        return isNaN(attr) ? -1 : attr;\n    }\n    set maxWidth(newValue) {\n        this.setAttribute('max-width', String(newValue));\n    }\n    get useInnerHTML() {\n        return this.hasAttribute('use-inner-html');\n    }\n    set useInnerHTML(newValue) {\n        if (newValue) {\n            this.setAttribute('use-inner-html', '');\n        }\n        else {\n            this.removeAttribute('use-inner-html');\n        }\n    }\n    get align() {\n        return this.getAttribute('align');\n    }\n    set align(newValue) {\n        this.setAttribute('align', newValue);\n    }\n    static removeLineBreaks(input) {\n        return input.replace(/\\s+/g, ' ').trim();\n    }\n}\ncustomElements.define('fitted-text', FittedText);\n"],"names":[],"version":3,"file":"intermission.181d4b9e.js.map","sourceRoot":"../"}